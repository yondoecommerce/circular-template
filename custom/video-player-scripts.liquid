{{ '/Content/shared/plugins/plugins-bundle.min.js' | script_tag }}

<script>
    var videoPlayer = null;

    {% if video.availableToWatch == true or video.previewVideoUrl360p != null %}
    var options = {
        controls: true,
        autoplay: false,
        preload: "none",
        poster: '{{ video.thumbnail720Url }}',
        bigPlayButton: true,
        plugins: {
            videoJsResolutionSwitcher: {
                default: 'high',
                dynamicLabel: true,
                customSourcePicker: function (_player, _sources, _label) {
                    _player.trigger('resolutionclick');
                    return _player.src(_sources[0]);
                }
            },
        },
        playbackRates: [ 0.5, 0.75, 1, 1.25, 1.5, 2],
        controlBar: {
            audioTrackButton: false
        }
    };

    videoPlayer = videojs('video-player', options, function(){
        $("#video-player").show();
        $("#video-player video").show();
        
        // videojs player has known issue with IE11 to play hls, so videojs should be forced to use flash player
        function handleIE11(){
            var isIE11 = !!(navigator.userAgent.match(/Trident/) && navigator.userAgent.match(/rv[ :]11/));
            if(isIE11)
                videoPlayer.options_.techOrder = ['flash'];
        };
        handleIE11();

        function updateSrc(){
            var sources = [];
            function getFileExtension(url) {
                "use strict";
                if (url === null) {
                    return "";
                }
                var index = url.lastIndexOf("/");
                if (index !== -1) {
                    url = url.substring(index + 1); // Keep path without its segments
                }
                index = url.indexOf("?");
                if (index !== -1) {
                    url = url.substring(0, index); // Remove query
                }
                index = url.indexOf("#");
                if (index !== -1) {
                    url = url.substring(0, index); // Remove fragment
                }
                index = url.lastIndexOf(".");
                return index !== -1
                    ? url.substring(index + 1) // Only keep file extension
                    : ""; // No extension found
            };

            var getSource = function(assetUrl, assetType){
                var type;
                if (getFileExtension(assetUrl) == "mp4")
                    type = "video/mp4";
                else if (getFileExtension(assetUrl) == "m3u8"){
                    type = "application/x-mpegURL";

                    function isIE10OrBelow()
                    {
                        return /MSIE\s/.test(navigator.userAgent) && parseFloat(navigator.appVersion.split("MSIE")[1]) <= 10;
                    };

                    if(isIE10OrBelow()){
                        alert("Video playback not supported. Please upgrade your browser or use Chrome/FireFox");
                        videoPlayer.error({ code: 6, message: "Video playback not supported. Please upgrade your browser or use Chrome/FireFox" });
                    }
                }

                return {
                    src: assetUrl,
                    type: type,
                    label: assetType.split(" ")[0],
                    res: parseInt(assetType.split(" ")[0].replace('p', ''))
                };
            };

            {% if video.availableToWatch == true %}
                {% for asset in video.assets %}
                sources.push(getSource('{{ asset.url }}', '{{ asset.type }}'));
                {% endfor %}
            {% elsif video.previewVideoUrl360p != null %}
                sources.push(getSource('{{ video.previewVideoUrl360p }}', '360p'));
            {% endif %}
    
            videoPlayer.updateSrc(sources);

            
            //watermark
            {% if store.selectedLogo %}
            videoPlayer.watermark({
                image: '{{ store.selectedLogo }}'
            });
            {% endif %}
        };
        updateSrc();       

    });
        
    //handle overlays
    {% if video.overlays.size > 0 %}
        var overlays = [];
        {% for overlay in video.overlays %}
        overlays.push({
            startTime: {% if overlay.startTime %}{{overlay.startTime}}{% else %}null{% endif %},
            endTime: {% if overlay.endTime %}{{overlay.endTime}}{% else %}null{% endif %},
            imageUrl: '{{overlay.imageUrl}}',
            url: {% if overlay.url %}'{{overlay.url}}'{% else %}null{% endif %},
                showWhenPaused: {{overlay.showWhenPaused}}
            });
        {% endfor %}
    
        overlay.load(videoPlayer, overlays);
    {% endif %}

    function endFrame(){
        var endFrame = $('#end-frame').html();
        $('#video-player').append(endFrame);

        // send message to iframe to start or to stop a video on cta panel
        videoPlayer.on('ended', function () {     
            var ctaIfram = $("#cta-iframe")[0];
            if(ctaIfram)   
                ctaIfram.contentWindow.postMessage("play", window.location.href);

            $('.end-frame').show();
        });

        videoPlayer.on('play', function () {       
            var ctaIfram = $("#cta-iframe")[0];
            if(ctaIfram) 
                ctaIfram.contentWindow.postMessage("stop", window.location.href);
            $('.end-frame').hide();
        });
    };

    //show end frame when the video is not rented or subscribed
    // if a video is available to watch but not rented or subscribed, it means that it is set as preview in a playlist
    {% if video.rented == false and video.subscribed == false and video.availableToWatch == false %}
    {% assign showEndFrame = true %}
    {% endif %}

    //show end frame if it is free available video and call to action set
    {% if video.availableToWatch and video.callToActionUrl %}
    {% assign showEndFrame = true %}
    {% endif %}

    {% if showEndFrame %}
    endFrame();
    {% endif %}

    // video player analytics
    var total = 0;
    var lastPlay = 0;
    var currentPlay = 0;
    var eventQueue = [];
    var viewingId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
        return v.toString(16);
    });     // random guid

    function AddEvent(e) {
        var currentTime = videoPlayer.currentTime();
        eventQueue.push({ timeStamp: new Date(), type: e.type, time: currentTime});
        //events.append('<li>' + e.type + '</li>');
    }

    // send event queue to server
    window.setInterval(function() {
        if (eventQueue.length == 0) return;
        $.ajax(
        {
            url: "/video/{{video.id}}/analytics",
            type: "POST",
            data: JSON.stringify({
                Events: eventQueue,
                viewGuid: viewingId,
                watchDuration: total
            }),
            contentType: "application/json; charset=utf-8"
        });
        // clear event queue.
        while(eventQueue.length > 0) {
            eventQueue.pop();
        }
    }, 15 * 1000);

    videoPlayer.on('play', function(e){
        lastPlay = this.currentTime();
        AddEvent(e);
    });
    videoPlayer.on('pause', function(e){
        total = total + this.currentTime() - lastPlay;
        AddEvent(e);
    });
    videoPlayer.on('timeupdate', function(e) {
        currentPlay = this.currentTime() - lastPlay;
        if (currentPlay >= 5) {
            // every 5 seconds save the total watched
            total = total + currentPlay;
            lastPlay = this.currentTime();
        }
    });
    videoPlayer.on('ended', AddEvent);
    videoPlayer.on('fullscreenchange ', AddEvent);
    videoPlayer.on('loadedalldata', AddEvent);
    videoPlayer.on('loadeddata', AddEvent);
    videoPlayer.on('loadedmetadata', AddEvent);
    videoPlayer.on('loadstart', AddEvent);
    videoPlayer.on('seeked', AddEvent);
    videoPlayer.on('waiting', AddEvent);
    videoPlayer.on('error', function(event) {
        var browserNotSupport = "Video playback not supported. Please upgrade your browser or use Chrome/FireFox";
        var messages = {
            // MEDIA_ERR_ABORTED
            1: "The video download was cancelled",
            // MEDIA_ERR_NETWORK
            2: "The video connection was lost, please confirm you're connected to the internet",
            // MEDIA_ERR_DECODE
            3: "The video is bad or in a format that can't be played on your browser",
            // MEDIA_ERR_SRC_NOT_SUPPORTED
            4: "Access to this video has expired. Reload the page to try again.",
            // MEDIA_ERR_ENCRYPTED (Chrome)
            5: "The video you're trying to watch is encrypted and we don't know how to decrypt it",
            //Browser not support to play hls
            6: browserNotSupport,
            unknown: "An unanticipated problem was encountered, check back soon and try again"
        };

        var code, dialog, player;
        player = this;
        code = videoPlayer.error ? videoPlayer.error().code : event.code;

        //manually change error text
        if(code == 4)
            $(".vjs-modal-dialog-content").text(browserNotSupport);

        // create the dialog
        dialog = document.createElement('div');
        dialog.className = 'vjs-error-dialog';
        dialog.textContent = messages[code] || messages['unknown'];
        addEventListener.call(dialog, 'click', function(event){
            player.el().removeChild(dialog);
        }, false);

        // add it to the DOM
        player.el().appendChild(dialog);
    });

    {% endif %}
        
       
    
    
    //disable right click on video player
    //$(document).ready(function () {
    //    $('#video-player').bind('contextmenu', function (event) {
    //        var rightClickAlertWidth = $('.right-click-alert').width();
    //        var rightClickAlertHeight = $('.right-click-alert').height();

    //        var videoPlayerOffset = $('.video-player').offset();
    //        var relativeYPosition = (event.pageY - videoPlayerOffset.top);
    //        var relativeXPosition = (event.pageX - videoPlayerOffset.left); // shows alert message on the right of the cursor

    //        if(event.pageX + rightClickAlertWidth > window.innerWidth)
    //            relativeXPosition = relativeXPosition - rightClickAlertWidth - 20;

    //        if(event.pageY + rightClickAlertHeight + 10 > window.innerHeight)
    //            relativeYPosition = relativeYPosition - rightClickAlertHeight - 10;

    //        $(".right-click-alert").css({ position: "absolute", top: relativeYPosition, left: relativeXPosition, display: 'block !important' });
    //        return false;
    //    });

    //    $('.right-click-alert').bind('contextmenu', function (event) {
    //        return false;
    //    });

    //    $('body').bind('contextmenu', ':not(#video-player)', function () {
    //        $(".right-click-alert").css({ display: 'none' });
    //    });

    //    $('body').bind('click', ':not(#video-player)', function () {
    //        $(".right-click-alert").css({ display: 'none' });
    //    });
    //});

</script>